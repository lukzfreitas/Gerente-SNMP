package view;


import controller.SNMPController;
import controller.UtilizacaoDeLinkController;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import services.SNMPGet;
import services.SnmpT2;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Lucas
 */
public class SNMPJFrame extends javax.swing.JFrame {

    private final static String IP_IN_DELIVERS = ".1.3.6.1.2.1.4.9.0";
    private final static String IP_OUT_REQUESTS = ".1.3.6.1.2.1.4.10.0";
    private final static String TCP_IN_SEGS = ".1.3.6.1.2.1.6.10.0";
    private final static String TCP_OUT_SEGS = ".1.3.6.1.2.1.6.11.0";
    private final static String UDP_IN_DATAGRAM = ".1.3.6.1.2.1.7.1.0";
    private final static String UDP_OUT_DATAGRAM = ".1.3.6.1.2.1.7.4.0";
    private final static String SNMP_IN_PKTS = ".1.3.6.1.2.1.11.1.0";
    private final static String SNMP_OUT_PKTS = ".1.3.6.1.2.1.11.2.0";
    private final static String UTILIZACAO_DE_LINK = "Utilização de Link";
    private final static String IF_SPEED = ".1.3.6.1.2.1.2.2.1.5";

    /**
     * Creates new form SNMPJFrame
     */
    public SNMPJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        list = new javax.swing.JList();
        ipMaquina = new javax.swing.JTextField();
        comunidade = new javax.swing.JTextField();
        tempo = new javax.swing.JTextField();
        get = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        DescriptionTextArea = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        list.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { ".1.3.6.1.2.1.4.9.0", ".1.3.6.1.2.1.4.10.0", ".1.3.6.1.2.1.6.10.0", ".1.3.6.1.2.1.6.11.0", ".1.3.6.1.2.1.7.1.0", ".1.3.6.1.2.1.7.4.0", ".1.3.6.1.2.1.11.1.0", ".1.3.6.1.2.1.11.2.0", "Utilização de Link" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        list.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(list);

        ipMaquina.setText("127.0.0.1");

        comunidade.setText("public");
        comunidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comunidadeActionPerformed(evt);
            }
        });

        tempo.setToolTipText("");
        tempo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tempoActionPerformed(evt);
            }
        });

        get.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        get.setText("GET");
        get.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getActionPerformed(evt);
            }
        });

        DescriptionTextArea.setColumns(20);
        DescriptionTextArea.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        DescriptionTextArea.setRows(5);
        jScrollPane2.setViewportView(DescriptionTextArea);

        jLabel1.setFont(new java.awt.Font("Calibri", 1, 12)); // NOI18N
        jLabel1.setText("IP da Máquina:");

        jLabel2.setFont(new java.awt.Font("Calibri", 1, 12)); // NOI18N
        jLabel2.setText("Comunidade:");

        jLabel3.setFont(new java.awt.Font("Calibri", 1, 12)); // NOI18N
        jLabel3.setText("Tempo de Periodicidade (segundos): ");
        jLabel3.setToolTipText("");

        jLabel4.setFont(new java.awt.Font("Calibri", 1, 13)); // NOI18N
        jLabel4.setText("Selecione uma das seguintes métricas:");

        jLabel5.setFont(new java.awt.Font("Calibri", 1, 12)); // NOI18N
        jLabel5.setText("Descrições das métricas:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel4)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane2)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(18, 18, 18)
                                    .addComponent(get, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(18, 18, 18)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel3)
                                        .addComponent(tempo, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(comunidade, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel2)
                                        .addComponent(ipMaquina, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel1))))
                            .addGap(10, 10, 10))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ipMaquina, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comunidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tempo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(get))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5)
                .addGap(3, 3, 3)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void comunidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comunidadeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comunidadeActionPerformed

    private void tempoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tempoActionPerformed
        // TODO add your handling code here:.
    }//GEN-LAST:event_tempoActionPerformed

    private void getActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getActionPerformed
        if (list.isSelectionEmpty()) {
            JOptionPane.showMessageDialog(null, "OID não informado!");
            return;
        }

        String ipAddress = ipMaquina.getText().replaceAll(" ", "");
        if (ipAddress.equalsIgnoreCase("")) {
            JOptionPane.showMessageDialog(null, "IP da máquina não informado!");
            return;
        }

        String community = comunidade.getText().replaceAll(" ", "");
        if (community.equalsIgnoreCase("")) {
            JOptionPane.showMessageDialog(null, "Comunidade não informada!");
            return;
        }

        String timeString = tempo.getText().replaceAll(" ", "");
        int time = (Integer.parseInt(timeString) * 1000);
        if (timeString.equalsIgnoreCase("") || time > 5000 || time < 1) {
            JOptionPane.showMessageDialog(null, "Periodo inválido!");
            return;
        }

        switch (list.getSelectedValue().toString()) {
            case IP_IN_DELIVERS:
                try {
                    SNMPController.createGraphic(
                            ipAddress,
                            community,
                            time,
                            "Ip Recebidos",
                            IP_IN_DELIVERS,
                            "Taxa de Datagramas recebidos"
                    );
                } catch (IOException e1) {
                    e1.printStackTrace();
                } catch (InterruptedException e1) {
                    e1.printStackTrace();
                }
                break;
                case IP_OUT_REQUESTS:
                try {
                    SNMPController.createGraphic(
                            ipAddress,
                            community,
                            time,
                            "Ip Enviados",
                            IP_OUT_REQUESTS,
                            "Taxa de Datagramas enviados"
                    );
                } catch (IOException e1) {
                    e1.printStackTrace();
                } catch (InterruptedException e1) {
                    e1.printStackTrace();
                }
                break;
            case TCP_IN_SEGS:
                try {
                    SNMPController.createGraphic(
                            ipAddress,
                            community,
                            time,
                            "TCP Recebidos",
                            TCP_IN_SEGS,
                            "Taxa de pacotes recebidos"
                    );
                } catch (IOException e1) {
                    e1.printStackTrace();
                } catch (InterruptedException e1) {
                    e1.printStackTrace();
                }
                break;
            case TCP_OUT_SEGS:
                try {
                    SNMPController.createGraphic(
                            ipAddress,
                            community,
                            time,
                            "TCP Enviados",
                            TCP_OUT_SEGS,
                            "Taxa de pacotes enviados"
                    );
                } catch (IOException e1) {
                    e1.printStackTrace();
                } catch (InterruptedException e1) {
                    e1.printStackTrace();
                }
                break;
            case UDP_IN_DATAGRAM:
                try {
                    SNMPController.createGraphic(
                            ipAddress,
                            community,
                            time,
                            "UDP Recebidos",
                            UDP_IN_DATAGRAM,
                            "Taxa de pacotes recebidos"
                    );
                } catch (IOException e1) {
                    e1.printStackTrace();
                } catch (InterruptedException e1) {
                    e1.printStackTrace();
                }
                break;
            case UDP_OUT_DATAGRAM:
                try {
                    SNMPController.createGraphic(
                            ipAddress,
                            community,
                            time,
                            "UDP Enviados",
                            UDP_OUT_DATAGRAM,
                            "Taxa de pacotes enviados"
                    );
                } catch (IOException e1) {
                    e1.printStackTrace();
                } catch (InterruptedException e1) {
                    e1.printStackTrace();
                }
                break;
            case SNMP_IN_PKTS:
                try {
                    SNMPController.createGraphic(
                            ipAddress,
                            community,
                            time,
                            "SNMP Recebidos",
                            SNMP_IN_PKTS,
                            "Taxa de pacotes recebidos"
                    );
                } catch (IOException e1) {
                    e1.printStackTrace();
                } catch (InterruptedException e1) {
                    e1.printStackTrace();
                }
                break;
            case SNMP_OUT_PKTS:
                try {
                    SNMPController.createGraphic(
                            ipAddress,
                            community,
                            time,
                            "SNMP Enviados",
                            SNMP_OUT_PKTS,
                            "Taxa de pacotes enviados"                            
                    );
                } catch (IOException e1) {
                    e1.printStackTrace();
                } catch (InterruptedException e1) {
                    e1.printStackTrace();
                }
                case UTILIZACAO_DE_LINK:                    
                try {
                    SnmpT2 snmpT2 = SnmpT2.snmpFactory(ipAddress, community);
                    int ifSpeed = SNMPGet.getValue(
                            snmpT2.getCommunityTarget(), 
                            snmpT2.getSnmp(), 
                            IF_SPEED
                    );
                    UtilizacaoDeLinkController.createGraphic(
                            ipAddress,
                            community,
                            time,
                            snmpT2,
                            ifSpeed                            
                    );
                } catch (IOException e1) {
                    e1.printStackTrace();
                } catch (InterruptedException ex) {
            Logger.getLogger(SNMPJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
                break;
        }
    }//GEN-LAST:event_getActionPerformed

    private void listValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listValueChanged
        switch (list.getSelectedValue().toString()) {
                    case IP_IN_DELIVERS:
                        DescriptionTextArea.setText("Taxa de datagramas IP recebidos\n [IpInDelivers]");
                        break;
                    case IP_OUT_REQUESTS:
                        DescriptionTextArea.setText("Taxa de datagramas IP enviados\n [IpOutRequests]");
                        break;
                    case TCP_IN_SEGS:
                        DescriptionTextArea.setText("Taxa de pacotes TCP recebidos\n [TcpInSegs]");
                        break;
                    case TCP_OUT_SEGS:
                        DescriptionTextArea.setText("Taxa de pacotes TCP enviados\n [TcpOutSegs]");
                        break;
                    case UDP_IN_DATAGRAM:
                        DescriptionTextArea.setText("Taxa de pacotes UDP recebidos\n [UdpInDatagram]");
                        break;
                    case UDP_OUT_DATAGRAM:
                        DescriptionTextArea.setText("Taxa de pacotes UDP enviados\n [UdpOutDatagram]");
                        break;
                    case SNMP_IN_PKTS:
                        DescriptionTextArea.setText("Taxa de pacotes SNMP recebidos\n [SnmpInPkts]");
                        break;
                    case SNMP_OUT_PKTS:
                        DescriptionTextArea.setText("Taxa de pacotes SNMP enviados\n [SnmpOutPkts]");
                        break;
                    case UTILIZACAO_DE_LINK:
                        DescriptionTextArea.setText("Métrica da utilização de Link\n" + 
                                "[IF_IN_OCTETS]\n[IF_OUT_OCTETS]\n[IF_SPEED]" );
                        break;
                    default:
                        DescriptionTextArea.setText("");
                }
    }//GEN-LAST:event_listValueChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SNMPJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SNMPJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SNMPJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SNMPJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SNMPJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea DescriptionTextArea;
    private javax.swing.JTextField comunidade;
    private javax.swing.JButton get;
    private javax.swing.JTextField ipMaquina;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList list;
    private javax.swing.JTextField tempo;
    // End of variables declaration//GEN-END:variables
}
